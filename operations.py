import json
import string
import random
from json import JSONDecodeError
from datetime import datetime

def Register(type,gamers_json_file,sellers_json_file,Email_ID,Username,Password,Contact_Number):
    '''Register Function || Already Given'''
    if type.lower()=='seller':
        f=open(sellers_json_file,'r+')
        d={
            "Email":Email_ID,
            "Username":Username,
            "Password":Password,
            "Contact Number":Contact_Number,
        }
        try:
            content=json.load(f)
            if d not in content and d["Username"] not in str(content):
                content.append(d)
                f.seek(0)
                f.truncate()
                json.dump(content,f)
        except JSONDecodeError:
            l=[]
            l.append(d)
            json.dump(l,f)
        f.close()
        return True
    elif type.lower()=='gamer':
        f=open(gamers_json_file,'r+')
        d={
            "Email":Email_ID,
            "Username":Username,
            "Password":Password,
            "Contact Number":Contact_Number,
            "Wishlist":[],
            "Cart":[],
        }
        try:
            content=json.load(f)
            if d not in content and d["Username"] not in str(content):
                content.append(d)
                f.seek(0)
                f.truncate()
                json.dump(content,f)
        except JSONDecodeError:
            l=[]
            l.append(d)
            json.dump(l,f)
        f.close()

def Login(type,gamers_json_file,sellers_json_file,Username,Password):
    '''Login Functionality || Return True if successfully logged in else False || Already Given'''
    d=0
    if type.lower()=='seller':
        f=open(sellers_json_file,'r+')
    else:
        f=open(gamers_json_file,'r+')
    try:
        content=json.load(f)
    except JSONDecodeError:
        return False
    for i in range(len(content)):
        if content[i]["Username"]==Username and content[i]["Password"]==Password:
            d=1
            break
    f.seek(0)
    f.truncate()
    json.dump(content,f)
    f.close()
    if d==0:
        return False
    return True

def AutoGenerate_ProductID():
    '''Return a autogenerated random product ID || Already Given'''
    product_ID=''.join(random.choices(string.ascii_uppercase+string.digits,k=4))
    return product_ID

def AutoGenerate_OrderID():
    '''Return a autogenerated random product ID || Already Given'''
    Order_ID=''.join(random.choices(string.ascii_uppercase+string.digits,k=3))
    return Order_ID

def days_between(d1, d2):
    '''Calculating the number of days between two dates || Already Given'''
    d1 = datetime.strptime(d1, "%Y-%m-%d")
    d2 = datetime.strptime(d2, "%Y-%m-%d")
    return abs((d2 - d1).days)

def Create_Product(owner,product_json_file,product_ID,product_title,product_type,price_per_day,total_stock_available):
    '''Creating a product || Return True if successfully created else False'''
    '''Write your code below'''
    d = {
    "Seller Username": owner,
    "Product ID": product_ID,
    "Product Title": product_title,
    "Product Type": product_type,
    "Price Per Day": price_per_day,
    "Total Stock Available": total_stock_available
    }
    with open(product_json_file,'r+') as f:
        try:
            content = json.load(f)
            if d not in content:
                content.append(d)
                f.seek(0)
                f.truncate()
                json.dump(content,f)
            else:
                return False
        except JSONDecodeError:
            l = []
            l.append(d)
            json.dump(l,f)
    return True

def Fetch_all_Products_created_by_seller(owner,product_json_file):
    '''Get all products created by the seller(owner)'''
    '''Write your code below'''
    l = []
    with open(product_json_file,'r') as f:
        content = json.load(f)
        for product in content:
            if product["Seller Username"] == owner:
                l.append(product)
    return l

def Fetch_all_products(products_json_file):
    '''Get all products created till now || Helper Function || Already Given'''
    All_Products_list=[]
    f=open(products_json_file,'r')
    try:
        content=json.load(f)
        All_Products_list=content
    except JSONDecodeError:
        pass
    return All_Products_list

def Fetch_Product_By_ID(product_json_file,product_ID):
    '''Get product deatils by product ID'''
    '''Write your code below'''
    Details=[]
    f=open(product_json_file,'r+')
    content1=json.load(f)
    for i in range(len(content1)):
        if content1[i]["Product ID"]==product_ID:
            Details.append(content1[i])
            break
    f.close()
    return Details


def Update_Product(Username,product_json_file,product_ID,detail_to_be_updated,new_value):
    '''Updating Product || Return True if successfully updated else False'''
    '''Write your code below'''
    d=0
    f=open(product_json_file,'r+')
    content2=json.load(f)
    for i in range(len(content2)):
        if content2[i]["Product ID"]==product_ID and detail_to_be_updated in content2[i].keys() and content2[i]["Seller Username"]==Username and detail_to_be_updated!="Product ID":
            content2[i][detail_to_be_updated]=new_value
            d=1
            break
    f.seek(0)
    f.truncate()
    json.dump(content2,f)
    f.close()
    if d==1:
        return True
    return False


def Add_item_to_wishlist(Username,product_ID,gamers_json_file):
    '''Add Items to wishlist || Return True if added successfully else False'''
    '''Write your code below'''
    with open(gamers_json_file,'r+') as f:
        try:
            content = json.load(f)
            for i in range(len(content)):
                if content[i]["Username"] == Username:
                    if product_ID not in content[i]["Wishlist"]:
                        content[i]["Wishlist"].append(product_ID)
                        f.seek(0)
                        f.truncate()
                        json.dump(content,f)
                        return True
            else:
                return False
        except JSONDecodeError:
            return False


def Remove_item_from_wishlist(Username,product_ID,gamers_json_file):
    '''Remove items from wishlist || Return True if removed successfully else False'''
    '''Write your code below'''
    with open(gamers_json_file,'r+') as f:
        try:
            content = json.load(f)
            for i in range(len(content)):
                if content[i]["Username"] == Username:
                    if product_ID in content[i]["Wishlist"]:
                        content[i]["Wishlist"].remove(product_ID)
                        f.seek(0)
                        f.truncate()
                        json.dump(content,f)
                        return True
                    else:
                        return False
            else:
                return False
        except JSONDecodeError:
            return False
    

def Add_item_to_cart(Username,product_ID,Quantity,gamers_json_file,booking_start_date,booking_end_date,products_json_file):
    '''Add item to the cart || Check whether the quantity mentioned is available || Return True if added successfully else False'''
    '''Add the Product ID, Quantity, Price, Booking Start Date, Booking End Date in the cart as list of dictionaries'''
    '''Write your code below'''
    fp1=open(gamers_json_file,"r+")
    fp2=open(products_json_file,"r+")
    c1=json.load(fp1)
    c2=json.load(fp2)
    for i in range(len(c2)):
        if c2[i][ "Product ID"]==product_ID:
            if c2[i]["Total Stock Available"]>=Quantity:
                for j in range(len(c1)):
                    if c1[j]["Ordered by"]==Username:
                        c1[j]["Items"][j]["Booking Start Date"]=booking_start_date
                        c1[j]["Items"][j][ "Booking End Date"]=booking_end_date
                        json.dump(c1,fp1)
                        fp1.close()
                        fp2.close()
                        return True
    else:
        fp1.close()
        fp2.close()
        return False
    

def Remove_item_from_cart(Username,product_ID,gamers_json_file):
    '''Remove items from the cart || Return True if removed successfully else False'''
    '''Write your code below'''
    with open(gamers_json_file,'r+') as f:
        try:
            content = json.load(f)
            for i in range(len(content)):
                if content[i]["Username"] == Username:
                    for product in content[i]["Cart"]:
                        if product["Product ID"] == product_ID:
                            content[i]["Cart"].remove(product)
                            f.seek(0)
                            f.truncate()
                            json.dump(content,f)
                            return True
                    else:
                        return False
            else:
                return False
        except JSONDecodeError:
            return False
    

def View_Cart(Username,gamers_json_file):
    '''Return the current cart of the user'''
    '''Write your code below'''
    f=open(gamers_json_file,'r')
    cart=[]
    try:
        content=json.load(f)
        for i in range(len(content)):
            if content[i]["Username"]==Username:
                cart=content[i]["Cart"]
                break
        return cart
    except JSONDecodeError:
        return cart
    

def Place_order(Username,gamers_json_file,Order_Id,orders_json_file,products_json_file):
    '''Place order || Return True is order placed successfully else False || Decrease the quantity of the product orderd if successfull'''
    '''Write your code below'''
    with open(gamers_json_file,'r+') as gf, open(orders_json_file,'r+') as of, open(products_json_file,'r+') as pf:
        try:
            gcontent = json.load(gf)
            ocontent = json.load(of)
            pcontent = json.load(pf)
            for i in range(len(gcontent)):
                if gcontent[i]["Username"] == Username:
                    order = {
                        "Order ID": Order_Id,
                        "Ordered by": Username,
                        "Items": gcontent[i]["Cart"]
                    }
                    Total_cost = 0
                    for product in gcontent[i]["Cart"]:
                        booking_start_date = datetime.strptime(product["Booking Start Date"], "%Y-%m-%d")
                        booking_end_date = datetime.strptime(product["Booking End Date"], "%Y-%m-%d")
                        days = (booking_end_date-booking_start_date).days
                        Total_cost += days * product["Price"]*product["Quantity"]
                        for j in range(len(pcontent)):
                            if pcontent[j]["Product ID"] == product["Product ID"]:
                                pcontent[j]["Total Stock Available"] -= product["Quantity"]
                    order["Total Cost"] = Total_cost
                    ocontent.append(order)
                    gf.seek(0)
                    gf.truncate()
                    json.dump(gcontent,gf)
                    of.seek(0)
                    of.truncate()
                    json.dump(ocontent,of)
                    pf.seek(0)
                    pf.truncate()
                    json.dump(pcontent,pf)
                    return True
            else:
                return False
        except JSONDecodeError:
            return False

    

def View_User_Details(gamers_json_file,Username):
    '''Return a list with all gamer details based on the username || return an empty list if username not found'''
    '''Write your code below'''
    with open(gamers_json_file,'r') as f:
        l = []
        try:
            content = json.load(f)
            for gamer in content:
                if gamer["Username"] == Username:
                    l.append(gamer)
                    return l
        except JSONDecodeError:
            pass
        return l
    

def Update_User(gamers_json_file,Username,detail_to_be_updated,updated_detail):
    '''Update the detail_to_be_updated of the user to updated_detail || Return True if successful else False'''
    '''Write your code below'''
    with open(gamers_json_file,'r+') as f:
        try:
            content = json.load(f)
            for i in range(len(content)):
                if content[i]["Username"] == Username:
                    try:
                        a = content[i][detail_to_be_updated]
                    except KeyError:
                        return False
                    content[i][detail_to_be_updated] = updated_detail
                    f.seek(0)
                    f.truncate()
                    json.dump(content,f)
                    return True
            else:
                return False
        except JSONDecodeError:
            return False
    

def Fetch_all_orders(orders_json_file,Username):
    '''Fetch all previous orders for the user and return them as a list'''
    '''Write your code below'''
    orders=[]
    f=open(orders_json_file,'r')
    try:
        content=json.load(f)
        f.close()
    except JSONDecodeError:
        f.close()
        return orders
    for i in range(len(content)):
        if content[i]["Ordered by"]==Username:
            orders.append(content[i])
    return orders